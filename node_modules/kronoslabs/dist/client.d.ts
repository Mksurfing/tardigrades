/**
 * Kronos Labs API Client
 */
import { Response } from "node-fetch";
import { ChatCompletion, ChatCompletionChunk, ChatCompletionRequest } from "./types";
interface KronosLabsConfig {
    apiKey: string;
    baseUrl?: string;
}
/**
 * Chat completions API
 */
declare class ChatCompletions {
    private client;
    constructor(client: KronosLabs);
    /**
     * Create a chat completion
     */
    create(params: ChatCompletionRequest): Promise<ChatCompletion | AsyncIterable<ChatCompletionChunk>>;
    /**
     * Create a non-streaming chat completion
     */
    private createCompletion;
    /**
     * Create a streaming chat completion
     */
    private streamCompletion;
    /**
     * Parse streaming response
     */
    private parseStreamResponse;
}
/**
 * Chat API
 */
declare class Chat {
    completions: ChatCompletions;
    constructor(client: KronosLabs);
}
/**
 * Kronos Labs API Client
 *
 * @example
 * ```typescript
 * const client = new KronosLabs({ apiKey: 'your-api-key' });
 * const response = await client.chat.completions.create({
 *   prompt: 'Hello, how are you?',
 *   temperature: 0.7
 * });
 * console.log(response.choices[0].message.content);
 * ```
 */
export declare class KronosLabs {
    private apiKey;
    private baseUrl;
    chat: Chat;
    private static readonly DEFAULT_BASE_URL;
    constructor(config: KronosLabsConfig);
    /**
     * Get headers for API requests
     */
    private getHeaders;
    /**
     * Make a POST request to the API
     */
    post(endpoint: string, data: any): Promise<any>;
    /**
     * Make a streaming POST request to the API
     */
    postStream(endpoint: string, data: any): Promise<Response>;
}
export {};
